/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    vector<double> getCollisionTimes(vector<vector<int>>& cars) {
        int n = cars.size();

        vector<int> f(n);
        iota(f.begin(), f.end(), 0);
        sort(f.begin(), f.end(), [&](int x, int y) {
            return cars[x][0] > cars[y][0];
        });

        vector<double> ans(n);
        vector<int> stk;

        auto get_time = [&](int idx1, int idx2) {
            return 1.0 * (cars[idx2][0] - cars[idx1][0]) / (cars[idx1][1] - cars[idx2][1]);
        };

        for (int i = 0; i < n; i++) {
            int idx = f[i];

            while (stk.size() && cars[f[stk.back()]][1] >= cars[idx][1]) {
                stk.pop_back();
            }

            while (stk.size() >= 2 && get_time(f[stk[stk.size() - 1]], f[stk[stk.size() - 2]]) <= get_time(f[stk[stk.size() - 1]], idx)) {
                stk.pop_back();
            }

            if (stk.size()) {
                int idx2 = f[stk.back()];
                ans[idx] = get_time(idx2, idx);
            } else {
                ans[idx] = -1;
            }
            stk.push_back(i);
        }

        return ans;
    }
};