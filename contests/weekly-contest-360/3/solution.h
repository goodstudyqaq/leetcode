/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    long long getMaxFunctionValue(vector<int>& r, long long k) {
        int n = r.size();

        vector<long long> a(n), a_go(n), b(n), c(n);

        for (int i = 0; i < n; i++) {
            b[i] = i;
            c[i] = r[i];
            a_go[i] = i;
        }
        vector<long long> new_a(n), new_a_go(n), new_b(n), new_c(n);
        auto work1 = [&]() {
            for (int i = 0; i < n; i++) {
                int go = c[i];
                new_c[i] = c[go];
                long long val = b[i] + b[go];
                new_b[i] = val;
            }
            b = new_b;
            c = new_c;
        };

        auto work2 = [&]() {
            for (int i = 0; i < n; i++) {
                int go = a_go[i];
                new_a_go[i] = c[go];
                long long val = new_a[i] + b[go];
                new_a[i] = val;
            }
            a = new_a;
            a_go = new_a_go;
        };
        k++;
        while (k) {
            int a = k % 2;
            if (a) {
                work2();
            }
            debug(k, b, c);
            work1();
            k /= 2;
        }
        long long res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res, a[i]);
        }
        return res;
    }
};