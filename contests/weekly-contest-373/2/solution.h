/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif
struct DSU {
    std::vector<int> f;
    DSU(int n) : f(n) { std::iota(f.begin(), f.end(), 0); }
    int leader(int x) {
        if (f[x] == x) {
            return x;
        }
        int y = leader(f[x]);
        f[x] = y;
        return f[x];
    }
    bool merge(int a, int b) {
        auto x = leader(a);
        auto y = leader(b);
        if (x == y) {
            return false;
        }
        f[x] = y;
        return true;
    }
};

class Solution {
   public:
    vector<int> lexicographicallySmallestArray(vector<int>& nums, int limit) {
        int n = nums.size();
        vector<int> f(n);
        iota(f.begin(), f.end(), 0);
        sort(f.begin(), f.end(), [&](int a, int b) {
            return nums[a] < nums[b];
        });
        DSU dsu(n);
        for (int i = 1; i < n; i++) {
            int idx1 = f[i], idx2 = f[i - 1];
            if (nums[idx1] - nums[idx2] <= limit) {
                dsu.merge(idx1, idx2);
            }
        }

        map<int, vector<int>> M;
        for (int i = 0; i < n; i++) {
            int idx = f[i];
            int fa = dsu.leader(idx);
            M[fa].push_back(nums[idx]);
        }

        debug(M);
        for (int i = n - 1; i >= 0; i--) {
            int fa = dsu.leader(i);
            nums[i] = M[fa].back();
            M[fa].pop_back();
        }
        return nums;
    }
};