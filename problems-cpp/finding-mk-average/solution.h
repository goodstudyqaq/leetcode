/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif
template <typename T>
struct BIT {
#define lowbit(x) x & -x
    int n;
    vector<T> a;
    // [1, n]
    BIT(int n) : n(n), a(n + 1) {}
    BIT() {}

    void init(int _n) {
        n = _n;
        a = vector<T>(n + 1);
    }

    void add(int x, T v) {
        while (x <= n) {
            a[x] += v;
            x += lowbit(x);
        }
    }

    // [1, x]
    T query(int x) {
        T res = 0;
        while (x) {
            res += a[x];
            x -= lowbit(x);
        }
        return res;
    }

    static int largest_bit(int x) {
        return 31 - __builtin_clz(x);
    }

    int search(T val) {  // 找到最后一个 res，使得 [1, res] 的前缀和 < val
        int level = largest_bit(n);
        int res = 0;
        for (int i = level; i >= 0; i--) {
            if (res + (1 << i) <= n && val > a[res + (1 << i)]) {  // 注意 val >= a[res + (1 << i)], 如果求的是 < val，那么相应也要去掉 = 号
                res += (1 << i);
                val -= a[res];
            }
        }
        return res;
    }
};

const int maxn = 1e5;
class MKAverage {
   public:
    int m, k;
    BIT<int> bit;
    BIT<long long> bit2;
    vector<int> V;
    MKAverage(int _m, int _k) {
        m = _m;
        k = _k;
        bit.init(maxn);
        bit2.init(maxn);
    }

    void addElement(int num) {
        V.push_back(num);
        bit.add(num, 1);
        bit2.add(num, num);
        if (V.size() > m) {
            int sz = V.size();
            bit.add(V[sz - m - 1], -1);
            bit2.add(V[sz - m - 1], -V[sz - m - 1]);
        }
    }

    int calculateMKAverage() {
        if (V.size() < m) return -1;
        int v1 = bit.search(k);
        int have = bit.query(v1);
        int need = k - have;
        long long remove1 = bit2.query(v1) + 1LL * need * (v1 + 1);
        int num = m - k;
        int v2 = bit.search(num);
        int have2 = bit.query(v2);
        int need2 = m - k - have2;
        long long sum1 = bit2.query(v2) + 1LL * need2 * (v2 + 1);
        debug(sum1, remove1);
        return (sum1 - remove1) / (m - 2 * k);
    }
};

/**
 * Your MKAverage object will be instantiated and called as such:
 * MKAverage* obj = new MKAverage(m, k);
 * obj->addElement(num);
 * int param_2 = obj->calculateMKAverage();
 */