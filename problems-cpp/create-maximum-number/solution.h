/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    vector<int> maxNumber(vector<int> &nums1, vector<int> &nums2, int k) {
        int start = max(k - (int)nums2.size(), 0);
        int end = min((int)nums1.size(), k);
        vector<int> ans;
        auto work = [&](vector<int> &nums, int cnt) -> vector<int> {
            vector<int> stk;
            int remain = nums.size() - cnt;
            int n = nums.size();
            for (int i = 0; i < n; i++) {
                while (stk.size() && remain && stk.back() < nums[i]) {
                    stk.pop_back();
                    remain--;
                }
                if (remain > 0) {
                    if (stk.size() < cnt) {
                        stk.push_back(nums[i]);
                    } else {
                        remain--;
                    }
                } else {
                    stk.push_back(nums[i]);
                }
            }
            return stk;
        };

        auto merge = [&](vector<int> &v1, vector<int> &v2) {
            debug(v1, v2);
            vector<int> v;
            int nowl = 0, nowr = 0;
            while (nowl < v1.size() || nowr < v2.size()) {
                bool flag = true;
                int a = nowl < v1.size() ? v1[nowl] : -1;
                int b = nowr < v2.size() ? v2[nowr] : -1;
                int gol = nowl, gor = nowr;
                while (gol < v1.size() || gor < v2.size()) {
                    int a = gol < v1.size() ? v1[gol] : -1;
                    int b = gor < v2.size() ? v2[gor] : -1;
                    if (a > b) {
                        flag = true;
                        break;
                    } else if (a < b) {
                        flag = false;
                        break;
                    } else {
                        gol++, gor++;
                    }
                }
                if (flag) {
                    v.push_back(a);
                    nowl++;
                } else {
                    v.push_back(b);
                    nowr++;
                }
            }
            return v;
        };

        auto check = [&](vector<int> &v1, vector<int> &v2) {
            if (v1.size() == 0) return true;
            for (int i = 0; i < k; i++) {
                if (v1[i] == v2[i]) continue;
                return v1[i] < v2[i];
            }
            return false;
        };
        debug(start, end);

        for (int i = start; i <= end; i++) {
            vector<int> v1 = work(nums1, i);
            vector<int> v2 = work(nums2, k - i);
            vector<int> v3 = merge(v1, v2);
            if (check(ans, v3)) {
                ans = v3;
            }
        }
        return ans;
    }
};