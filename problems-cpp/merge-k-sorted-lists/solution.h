/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
   public:

struct cmp {//重写仿函数
        bool operator() (const ListNode* a, const ListNode* b) {
            return a->val > b->val;//按val值升序排列,这里的自定义排序规则与sort的相反
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.size() == 0) {
            return NULL;
        }
        priority_queue<ListNode*, vector<ListNode*>, cmp> q;
        for (auto it : lists) {
            if (it != NULL) {
                q.push(it);
            }
        }
        debug(q.size());
        if (q.size() == 0) {
            return NULL;
        }

        ListNode* rt = q.top();
        q.pop();
        ListNode* now = rt;
        if (now->next != NULL)
            q.push(now->next);

        while (q.size()) {
            auto it = q.top();
            q.pop();
            if (it->next != NULL) {
                q.push(it->next);
            }
            now->next = it;
            now = it;
        }
        return rt;
    }
};