/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

struct DSU {
    std::vector<int> f;
    DSU(int n) : f(n) { std::iota(f.begin(), f.end(), 0); }
    int leader(int x) {
        if (f[x] == x) {
            return x;
        }
        int y = leader(f[x]);
        f[x] = y;
        return f[x];
    }
    bool merge(int a, int b) {
        auto x = leader(a);
        auto y = leader(b);
        if (x == y) {
            return false;
        }
        f[x] = y;
        return true;
    }
};

class Solution {
   public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        
        vector<int> f(n);
        iota(f.begin(), f.end(), 0);
        sort(f.begin(), f.end(), [&](int x, int y) {
            return heights[x] < heights[y];
        });



        DSU d1(n), d2(n);
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            int idx = f[i];
            int h = heights[idx];
            if (idx + 1 < n && heights[idx + 1] >= h) {
                d1.merge(idx, idx + 1);
                d2.merge(idx + 1, idx);
            }
            if (idx - 1 >= 0 && heights[idx - 1] >= h) {
                d2.merge(idx, idx - 1);
                d1.merge(idx - 1, idx);
            }
            int l = d2.leader(idx);
            int r = d1.leader(idx);
            debug(idx, l, r);
            ans = max(ans, (r - l + 1) * h);
        }
        return ans;
    }
};