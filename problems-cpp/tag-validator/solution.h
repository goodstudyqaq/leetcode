/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    bool isValid(string code) {
        int now = 0;
        int n = code.size();

        vector<string> tags;
        string CDATA = "<![CDATA[";
        string CDATA_END = "]]>";

        while (now < n) {
            if (now != 0) {
                if (tags.size() == 0) return false;
            }
            if (code[now] == '<') {
                int go = now;
                while (go < n && go - now < CDATA.size() && code[go] == CDATA[go - now]) go++;
                if (go - now == CDATA.size()) {
                    if (tags.size() == 0) return false;
                    now = go;
                    go = now;
                    while (go < n) {
                        if (go + 2 >= n) {
                            return false;
                        }
                        if (code[go] == ']' && code[go + 1] == ']' && code[go + 2] == '>') {
                            break;
                        }
                        go++;
                    }
                    // find ]]>
                    now = go + 3;
                } else {
                    // tag
                    string tag = "";
                    int go = now + 1;
                    if (go == n) return false;
                    bool rev = false;
                    if (code[go] == '/') go++, rev = true;
                    while (go < n && code[go] != '>') {
                        if (code[go] < 'A' || code[go] > 'Z') return false;
                        tag += code[go];
                        go++;
                    }
                    if (tag.size() > 9) return false;
                    if (tag.size() == 0) return false;
                    if (rev) {
                        if (tags.size() == 0) return false;
                        string tmp = tags.back();
                        if (tmp != tag) return false;
                        tags.pop_back();
                    } else {
                        tags.push_back(tag);
                    }
                    now = go + 1;
                }
            } else {
                if (tags.size() == 0) return false;
                now++;
            }
        }
        if (tags.size()) return false;
        return true;
    }
};