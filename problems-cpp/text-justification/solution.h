/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        int n = words.size();
        vector<string> ans;
        int now = 0;

        while (now < n) {
            int go = now;
            int cnt = words[go].size();
            go++;
            while (go < n && cnt + 1 + words[go].size() <= maxWidth) {
                cnt += 1 + words[go].size();
                go++;
            }
            if (cnt == maxWidth) {
                string it = "";
                for (int i = now; i < go; i++) {
                    it += words[i];
                    if (i != go - 1) {
                        it += ' ';
                    }
                }
                ans.push_back(it);
            } else {
                if (go - now == 1) {
                    string it = words[now];
                    while (it.size() != maxWidth) it += ' ';
                    ans.push_back(it);
                } else {
                    if (go == n) {
                        string it = words[now];
                        for (int i = now + 1; i < go; i++) {
                            it += ' ';
                            it += words[i];
                        }
                        while (it.size() != maxWidth) it += ' ';
                        ans.push_back(it);

                    } else {
                        int num = go - now - 1;
                        int left = maxWidth - cnt;
                        int add = left / num;
                        int more = left % num;
                        string it;
                        string space = "";
                        for (int i = 0; i < add; i++) {
                            space += ' ';
                        }

                        for (int i = now; i < go; i++) {
                            it += words[i];
                            if (i != go - 1) {
                                it += ' ';
                                it += space;
                                if (i - now < more) {
                                    it += ' ';
                                }
                            }
                        }
                        ans.push_back(it);
                    }
                }
            }
            now = go;
        }
        return ans;
    }
};