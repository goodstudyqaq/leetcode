/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif
template <class T>
auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D>
auto vect(const T& v, int n, D... m) {
    return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}

template <typename T>
static constexpr T inf = numeric_limits<T>::max() / 2;
mt19937_64 mrand(random_device{}());
long long rnd(long long x) { return mrand() % x; }
int lg2(long long x) { return sizeof(long long) * 8 - 1 - __builtin_clzll(x); }

class RandomizedCollection {
   public:
    vector<int> V;
    unordered_map<int, unordered_set<int>> M;
    RandomizedCollection() {
    }

    bool insert(int val) {
        bool flag = (M[val].size() == 0);
        V.push_back(val);
        M[val].insert(V.size() - 1);
        return flag;
    }

    bool remove(int val) {
        bool flag = (M[val].size() > 0);
        if (flag) {
            int sz = V.size();
            if (V[sz - 1] == val) {
                V.resize(sz - 1);
                M[val].erase(sz - 1);
            } else {
                int idx1 = *M[val].begin();
                M[val].erase(idx1);
                int val2 = V[sz - 1];
                M[val2].erase(sz - 1);
                M[val2].insert(idx1);
                V[idx1] = val2;
                V.resize(sz - 1);
            }
        }
        return flag;
    }

    int getRandom() {
        int idx = rnd(V.size());
        return V[idx];
    }
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection* obj = new RandomizedCollection();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */