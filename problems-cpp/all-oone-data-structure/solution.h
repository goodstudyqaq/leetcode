/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class AllOne {
   public:
    list<pair<unordered_set<string>, int>> lst;
    unordered_map<string, list<pair<unordered_set<string>, int>>::iterator> nodes;

    AllOne() {
    }

    void inc(string key) {
        if (nodes.count(key)) {
            auto it = nodes[key];
            if (next(it) == lst.end() || next(it)->second != it->second + 1) {
                unordered_set<string> tmp{key};
                nodes[key] = lst.emplace(next(it), tmp, it->second + 1);
            } else {
                next(it)->first.insert(key);
                nodes[key] = next(it);
            }
            it->first.erase(key);
            if (it->first.size() == 0) {
                lst.erase(it);
            }
        } else {
            if (lst.size() == 0 || lst.begin()->second != 1) {
                unordered_set<string> tmp{key};
                lst.emplace_front(tmp, 1);
                nodes[key] = lst.begin();
            } else {
                lst.begin()->first.insert(key);
                nodes[key] = lst.begin();
            }
        }
    }

    void dec(string key) {
        auto it = nodes[key];
        if (it->second == 1) {
            it->first.erase(key);
            if (it->first.size() == 0) {
                lst.erase(it);
            }
            nodes.erase(key);
        } else {
            if (it == lst.begin() || prev(it)->second != it->second - 1) {
                unordered_set<string> tmp{key};
                nodes[key] = lst.emplace(it, tmp, it->second - 1);
            } else {
                prev(it)->first.insert(key);
                nodes[key] = prev(it);
            }
            it->first.erase(key);
            if (it->first.size() == 0) {
                lst.erase(it);
            }
        }
    }

    string getMaxKey() {
        if (lst.size()) {
            return *lst.rbegin()->first.begin();
        } else {
            return "";
        }
    }

    string getMinKey() {
        if (lst.size()) {
            return *lst.begin()->first.begin();
        } else {
            return "";
        }
    }
};

/**
 * Your AllOne object will be instantiated and called as such:
 * AllOne* obj = new AllOne();
 * obj->inc(key);
 * obj->dec(key);
 * string param_3 = obj->getMaxKey();
 * string param_4 = obj->getMinKey();
 */