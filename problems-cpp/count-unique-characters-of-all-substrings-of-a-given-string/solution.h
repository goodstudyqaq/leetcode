/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

template <class T>
auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D>
auto vect(const T& v, int n, D... m) {
    return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}

template <typename T>
static constexpr T inf = numeric_limits<T>::max() / 2;
mt19937_64 mrand(random_device{}());
long long rnd(long long x) { return mrand() % x; }
int lg2(long long x) { return sizeof(long long) * 8 - 1 - __builtin_clzll(x); }

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef pair<int, int> pii;
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

class Solution {
   public:
    int uniqueLetterString(string s) {
        int n = s.size();
        auto next = vect(-1, n, 26);
        auto pre = vect(n, n, 26);

        for (int i = 0; i < n; i++) {
            if (i - 1 >= 0) {
                for (int j = 0; j < 26; j++) {
                    next[i][j] = next[i - 1][j];
                }
            }
            next[i][s[i] - 'A'] = i;
        }

        for (int i = n - 1; i >= 0; i--) {
            if (i + 1 < n) {
                for (int j = 0; j < 26; j++) {
                    pre[i][j] = pre[i + 1][j];
                }
            }
            pre[i][s[i] - 'A'] = i;
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            int it = s[i] - 'A';
            int left = -1, right = n;
            if (i - 1 >= 0) {
                left = next[i - 1][it];
            }
            if (i + 1 < n) {
                right = pre[i + 1][it];
            }

            int left_num = i - left;
            int right_num = right - i;
            ans += left_num * right_num;
        }
        return ans;
    }
};