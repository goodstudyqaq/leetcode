/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int racecar(int target) {
        map<pair<long long, long long>, int> d;
        queue<pair<long long, long long>> Q;

        Q.push({0, 1});
        d[{0, 1}] = 0;
        int left_limit = -target * 2;
        int right_limit = target * 2;

        while (!Q.empty()) {
            auto it = Q.front();
            Q.pop();
            if (it.first == target) {
                return d[it];
            }
            if (d.count({it.first + it.second, it.second * 2}) == 0 && it.first + it.second <= right_limit && it.first + it.second >= left_limit) {
                d[{it.first + it.second, it.second * 2}] = d[it] + 1;
                Q.push({it.first + it.second, it.second * 2});
            }
            int news = it.second > 0 ? -1 : 1;
            if (d.count({it.first, news}) == 0) {
                d[{it.first, news}] = d[it] + 1;
                Q.push({it.first, news});
            }
        }
        return -1;
    }
};