/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

template <class T>
auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D>
auto vect(const T& v, int n, D... m) {
    return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}

template <typename T>
static constexpr T inf = numeric_limits<T>::max() / 2;
mt19937_64 mrand(random_device{}());
long long rnd(long long x) { return mrand() % x; }
int lg2(long long x) { return sizeof(long long) * 8 - 1 - __builtin_clzll(x); }

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef pair<int, int> pii;
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;


class Solution {
   public:
    int minSwap(vector<int>& nums1, vector<int>& nums2) {

        int n = nums1.size();
        auto dp = vect(inf<int>, n, 2);

        auto nums = vect(0, n, 2);
        for (int i = 0; i < n; i++) {
            nums[i][0] = nums1[i];
            nums[i][1] = nums2[i];
        }

        for (int i = 0; i < n; i++) {
            if (i == 0) {
                dp[i][0] = 0;
                dp[i][1] = 1;
            } else {
                for (int k1 = 0; k1 < 2; k1++) {
                    for (int k2 = 0; k2 < 2; k2++) {
                        if (nums[i][0 ^ k1] > nums[i - 1][0 ^ k2] && nums[i][1 ^ k1] > nums[i - 1][1 ^ k2]) {
                            dp[i][k1] = min(dp[i][k1], dp[i - 1][k2] + k1);
                        }   
                    }
                }
            }
        }
        return min(dp[n - 1][0], dp[n - 1][1]);
    }
};