/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

typedef long long ll;
typedef long double ld;

struct Point {
    long long x, y;
    Point() : x(), y() {}
    Point(ll _x, ll _y) : x(_x), y(_y) {}

    Point operator+(const Point &a) const {
        return Point(x + a.x, y + a.y);
    }
    Point operator-(const Point &a) const {
        return Point(x - a.x, y - a.y);
    }
    ll operator*(const Point &a) const {
        return x * a.y - y * a.x;
    }

    double len() const {
        return sqrtl((ld)x * x + (ld)y * y);
    }

    bool operator<(const Point &a) const {
        if (x != a.x) return x < a.x;
        return y < a.y;
    }
};

bool cmp(const Point &v, const Point &u) {
    ll x = v * u;
    if (x != 0) return x > 0;
    return v.len() < u.len();
}

const int maxn = 3001;
int n;
Point a[maxn], h[maxn];
int m;

void graham() {
    sort(a, a + n, cmp);

    int sz = n - 1;
    while (sz >= 0 && (a[n - 1] - a[0]) * (a[sz] - a[0]) == 0) {
        sz--;
    }

    for (int i = sz + 1, r = n - 1; i < r; i++, r--) {
        swap(a[i], a[r]);
    }

    m = 0;
    for (int i = 0; i < n; i++) {
        if (a[i].x == 1 && a[i].y == 1) {
            debug(i, n, a[i + 1].x, a[i + 1].y);
        }
        while (m > 1 && (a[i] - h[m - 1]) * (a[i] - h[m - 2]) > 0) m--;
        h[m++] = a[i];
    }
}

class Solution {
   public:
    vector<vector<int>> outerTrees(vector<vector<int>> &trees) {
        n = trees.size();
        for (int i = 0; i < n; i++) {
            a[i] = Point(trees[i][0], trees[i][1]);
        }
        sort(a, a + n);
        auto p0 = a[0];
        debug(p0.x, p0.y);
        for (int i = 0; i < n; i++) {
            a[i] = a[i] - p0;
        }
        graham();
        vector<vector<int>> ans(m);
        for (int i = 0; i < m; i++) {
            Point it = h[i] + p0;
            vector<int> res{(int)it.x, (int)it.y};
            ans[i] = res;
        }
        return ans;
    }
};