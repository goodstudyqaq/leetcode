/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

struct line {
    int x, h, flag;
    bool operator<(const line& b) const {
        if (x != b.x) return x < b.x;
        if (flag != b.flag) return flag > b.flag;
        return h * flag > b.h * flag;
    }
};

class Solution {
   public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        vector<line> V;
        for (auto it : buildings) {
            V.push_back((line){it[0], it[2], 1});
            V.push_back((line){it[1], it[2], -1});
        }
        sort(V.begin(), V.end());
        multiset<int> S;

        int sz = V.size();
        vector<vector<int>> ans;
        for (int i = 0; i < sz; i++) {
            line& it = V[i];
            if (it.flag == 1) {
                if (S.size() == 0) {
                    ans.push_back({it.x, it.h});
                } else {
                    int mx_h = *S.rbegin();
                    if (it.h > mx_h) {
                        ans.push_back({it.x, it.h});
                    }
                }
                S.insert(it.h);
            } else {
                S.erase(S.find(it.h));
                if (S.size() == 0) {
                    ans.push_back({it.x, 0});
                } else {
                    int mx_h = *S.rbegin();
                    if (mx_h < it.h) {
                        ans.push_back({it.x, mx_h});
                    }
                }
            }
        }
        return ans;
    }
};