/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif
template <class T>
auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D>
auto vect(const T& v, int n, D... m) {
    return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}

template <typename T>
static constexpr T inf = numeric_limits<T>::max() / 2;
mt19937_64 mrand(random_device{}());
long long rnd(long long x) { return mrand() % x; }
int lg2(long long x) { return sizeof(long long) * 8 - 1 - __builtin_clzll(x); }


class Solution {
   public:
    string smallestGoodBase(string n) {
        long long val = 0;
        for (int i = 0; i < n.size(); i++) {
            val = val * 10 + n[i] - '0';
        }

        long long ans;

        auto check = [&](long long x, int k) -> long long {
            long long now = 1;
            long long sum = 0;
            for (int i = 0; i <= k; i++) {
                if (sum > val - now) return 1;
                sum += now;
                if (i < k && now > val / x) return 1;
                if (i < k) {
                    now = now * x;
                }
            }
            return sum - val;
        };
        

        auto work = [&](int k) {
            long long l = 2, r = val;
            long long ans = -1;
            while (l <= r) {
                long long mid = l + r >> 1;
                if (check(mid, k) <= 0) {
                    ans = mid;
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            return ans;
        };

        for (int i = 1; i < 60; i++) {
            long long x = work(i);
            if (check(x, i) == 0) {
                ans = x;
            }
        }
        return to_string(ans);
    }
};