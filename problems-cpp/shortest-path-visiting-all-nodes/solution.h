/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif


template <class T>
auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D>
auto vect(const T& v, int n, D... m) {
    return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}

template <typename T>
static constexpr T inf = numeric_limits<T>::max() / 2;
mt19937_64 mrand(random_device{}());
long long rnd(long long x) { return mrand() % x; }
int lg2(long long x) { return sizeof(long long) * 8 - 1 - __builtin_clzll(x); }

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef pair<int, int> pii;
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;


class Solution {
   public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int LIMIT = 1 << n;
        auto dis = vect(inf<int>, LIMIT, n); 

        queue<pair<int, int>> Q;
        for (int i = 0; i < n; i++) {
            dis[1 << i][i] = 0;
            Q.push({1 << i, i});
        }

        while (!Q.empty()) {
            auto [status, u] = Q.front();
            if (status == (1 << n) - 1) return dis[status][u];
            Q.pop();
            for (auto v : graph[u]) {
                int new_s = status | (1 << v);
                int new_u = v;
                if (dis[new_s][new_u] == inf<int>) {
                    dis[new_s][new_u] = dis[status][u] + 1;
                    Q.push({new_s, new_u});
                }
            }
        }

        return 0;

    }
};