/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

template <class T>
auto vect(const T& v, int n) { return vector<T>(n, v); }
template <class T, class... D>
auto vect(const T& v, int n, D... m) {
    return vector<decltype(vect(v, m...))>(n, vect(v, m...));
}

template <typename T>
static constexpr T inf = numeric_limits<T>::max() / 2;
mt19937_64 mrand(random_device{}());
long long rnd(long long x) { return mrand() % x; }
int lg2(long long x) { return sizeof(long long) * 8 - 1 - __builtin_clzll(x); }

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

typedef pair<int, int> pii;
typedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;


class Solution {
   public:
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        vector<vector<int>> V(n);

        for (int i = 0; i < n - 1; i++) {
            int u = edges[i][0], v = edges[i][1];
            V[u].push_back(v);
            V[v].push_back(u);
        }
        vector<int> sum(n);
        vector<int> sz(n);

        function<void(int, int)> dfs = [&](int u, int pre) {
            for (auto v : V[u]) {
                if (v == pre) continue;
                dfs(v, u);
                sum[u] += sum[v] + sz[v];
                sz[u] += sz[v];
            }
            sz[u]++;
        };
        dfs(0, -1);

        vector<int> ans(n);
        function<void(int, int)> dfs2 = [&](int u, int pre) {
            ans[u] = sum[u];
            for (auto v : V[u]) {
                if (v == pre) continue;
                int before_sum_u = sum[u];
                int before_sz_u = sz[u];
                int before_sum_v = sum[v];
                int before_sz_v = sz[v];

                sum[u] = sum[u] - (sum[v] + sz[v]);
                sz[u] = sz[u] - sz[v];

                sum[v] = sum[v] + (sum[u] + sz[u]);
                sz[v] = sz[v] + sz[u];
                dfs2(v, u);

                sum[u] = before_sum_u;
                sum[v] = before_sum_v;
                sz[u] = before_sz_u;
                sz[v] = before_sz_v;
            }
        };
        dfs2(0, -1);
        return ans;
    }
};