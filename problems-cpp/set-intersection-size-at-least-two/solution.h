/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

unordered_map<int, int> sum;
#define lson l, m, rt << 1
#define rson m + 1, r, rt << 1 | 1

void update(int L, int x, int l, int r, int rt) {
    if (l == r) {
        sum[rt] += x;
        return;
    }
    int m = l + r >> 1;
    if (L <= m)
        update(L, x, lson);
    else
        update(L, x, rson);
    sum[rt] = sum[rt << 1] + sum[rt << 1 | 1];
}

int query(int L, int R, int l, int r, int rt) {
    if (L <= l && r <= R) {
        return sum[rt];
    }
    int m = l + r >> 1;
    int res = 0;
    if (L <= m) res += query(L, R, lson);
    if (R > m) res += query(L, R, rson);
    return res;
}

class Solution {
   public:
    int intersectionSizeTwo(vector<vector<int>> &v) {
        sort(v.begin(), v.end(), [&](vector<int> &a, vector<int> &b) {
            return a[1] < b[1];
        });
        sum.clear();

        int n = v.size();
        int ans = 0;
        unordered_set<int> choose;
        for (int i = 0; i < n; i++) {
            int l = v[i][0], r = v[i][1];
            int tmp = query(l, r, 0, 1e8, 1);
            if (tmp >= 2) continue;
            tmp = 2 - tmp;
            ans += tmp;
            int val = r;
            while (tmp) {
                while (choose.count(val)) {
                    val--;
                }
                choose.insert(val);
                debug(val);
                update(val, 1, 0, 1e8, 1);
                tmp--;
            }
        }
        return ans;
    }
};