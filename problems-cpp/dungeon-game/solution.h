/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int n = dungeon.size();
        int m = dungeon[0].size();

        int l = dungeon[0][0] > 0 ? 1 : abs(dungeon[0][0]) + 1, r = (n + m - 1) * 1000 + 1;
        vector<vector<int>> dp(n, vector<int>(m));

        auto check = [&](int val) -> bool {
            dp[0][0] = val + dungeon[0][0];
            if (dp[0][0] <= 0) return false;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (i == 0 && j == 0) continue;
                    dp[i][j] = -1e9;

                    if (i - 1 >= 0 && dp[i - 1][j] != -1e9) {
                        dp[i][j] = max(dp[i][j], dp[i - 1][j] + dungeon[i][j]);
                    }
                    if (j - 1 >= 0 && dp[i][j - 1] != -1e9) {
                        dp[i][j] = max(dp[i][j], dp[i][j - 1] + dungeon[i][j]);
                    }
                    if (dp[i][j] <= 0) {
                        dp[i][j] = -1e9;
                    }
                }
            }
            return dp[n - 1][m - 1] > 0;
        };

        int ans = -1;
        while (l <= r) {
            int mid = l + r >> 1;
            if (check(mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;


    }
};