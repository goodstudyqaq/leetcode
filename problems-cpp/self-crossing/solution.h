/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    bool isSelfCrossing(vector<int>& distance) {
        int n = distance.size();

        if (n <= 3) return false;

        bool limit = false;

        vector<int> V[2];
        V[0].push_back(distance[0]);
        V[1].push_back(distance[1]);

        if (distance[2] <= distance[0]) {
            limit = true;
        }
        V[0].push_back(distance[2]);

        for (int i = 3; i < n; i++) {
            int flag = i % 2;
            if (limit) {
                if (distance[i] >= V[flag].back()) return true;
                V[flag].push_back(distance[i]);
            } else {
                if (i == 3) {
                    if (distance[i] < V[flag].back()) {
                        limit = true;
                    } else if (distance[i] == V[flag].back()) {
                        limit = true;
                        int flag2 = flag ^ 1;
                        int sz2 = V[flag2].size();
                        int tmp2 = V[flag2][sz2 - 1] - V[flag2][sz2 - 2];
                        V[flag2].push_back(tmp2);
                    }
                    V[flag].push_back(distance[i]);
                } else {
                    int sz = V[flag].size();
                    int tmp = V[flag][sz - 1] - V[flag][sz - 2];
                    if (distance[i] < tmp) {
                        limit = true;
                    } else if (distance[i] >= tmp && distance[i] <= V[flag][sz - 1]) {
                        limit = true;
                        int flag2 = flag ^ 1;
                        int sz2 = V[flag2].size();
                        int tmp2 = V[flag2][sz2 - 1] - V[flag2][sz2 - 2];
                        V[flag2].push_back(tmp2);
                    }
                    V[flag].push_back(distance[i]);
                }
            }
        }
        return false;
    }
};