/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    
    bool is_digit(char it) {
        return it >= '0' && it <= '9';
    }

    bool is_small(char it) {
        return it >= 'a' && it <= 'z';
    }

    bool is_big(char it) {
        return it >= 'A' && it <= 'Z';
    }

    int strongPasswordChecker(string password) {
        int n = password.size();
        debug(n);

        if (n <= 3) {
            return 6 - n;
        }

        typedef pair<char, int> pci;
        vector<pci> V;
        int now = 0;
        int delete_num = 0;
        if (n > 20) delete_num = n - 20;
        int ans = delete_num;
        // delete
        while (now < n) {
            int go = now;
            while (go < n && password[go] == password[now]) go++;
            int len = go - now;
            V.push_back({password[now], len});
            now = go;
        }

        while (delete_num) {
            int idx = -1;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < V.size(); j++) {
                    if (V[j].second >= 3 && V[j].second % 3 == i) {
                        idx = j;
                        i = 10;
                        break;
                    }
                }
            }
            if (idx == -1) break;
            delete_num--;
            V[idx].second--;
        }
        vector<bool> flag(3);
        for (int i = 0; i < n; i++) {
            if (is_digit(password[i])) flag[0] = 1;
            if (is_small(password[i])) flag[1] = 1;
            if (is_big(password[i])) flag[2] = 1;
        }
        int need = 3 - flag[0] - flag[1] - flag[2];
        debug(need);

        int add = 0;
        if (n < 6) add = 6 - n;
        ans += add;
        need -= min(need, add);
        debug(ans, add);
        // modify
        int modify_num = 0;
        debug(V);
        for (int i = 0; i < V.size(); i++) {
            if (V[i].second >= 3) {
                int tmp = V[i].second / 3;
                if (add > 0) {
                    debug(tmp, add);
                    int tmp2 = min(tmp, add);
                    tmp -= tmp2;
                    add -= tmp2;
                }
                modify_num += tmp;
            }
        }
        need -= min(need, modify_num);
        ans += modify_num;
        ans += need;
        return ans;
    }
};