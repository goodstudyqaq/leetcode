/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        if (n == 0) {
            return m;
        } else if (m == 0) {
            return n;
        }



        const int inf = numeric_limits<int>::max() / 2;
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, inf));
        dp[0][0] = 0;
        for (int i = 1; i <= n; i++) dp[i][0] = i;

        for (int i = 1; i <= m; i++) dp[0][i] = i;


        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1]);
                } else {
                    // insert
                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);
                    // delete
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);
                    // change
                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1);
                }
                debug(i, j, dp[i][j]);
            }
        }
    
        int ans = inf;
        for (int i = 1; i <= n; i++) {
            ans = min(ans, dp[i][m] + (n - i));
        }
        return ans;

    }
};