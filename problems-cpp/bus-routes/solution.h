/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {
        if (source == target) return 0;
        int r_sz = routes.size();
        unordered_map<int, vector<int>> M;
        vector<vector<int>> Go(r_sz);

        for (int i = 0; i < r_sz; i++) {
            int m = routes[i].size();
            for (int j = 0; j < m; j++) {
                int u = routes[i][j];
                for (auto it : M[u]) {
                    Go[it].push_back(i);
                    Go[i].push_back(it);
                }
                M[u].push_back(i);
            }
        }
        queue<int> Q;
        unordered_map<int, int> d;

        for (auto it : M[source]) {
            Q.push(it);
            d[it] = 1;
        }

        while (!Q.empty()) {
            int r = Q.front();
            Q.pop();

            for (auto v : Go[r]) {
                if (d.count(v) == 0) {
                    d[v] = d[r] + 1;
                    Q.push(v);
                }
            }
        }

        const int inf = numeric_limits<int>::max() / 2;
        int res = inf;
        for (auto it : M[target]) {
            if (d.count(it)) {
                res = min(res, d[it]);
            }
        }
        if (res == inf) return -1;
        return res;
    }
};