/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

unordered_map<int, int> lazy;
unordered_map<int, int> mx;

#define lson l, m, rt << 1
#define rson m + 1, r, rt << 1 | 1

void push_down(int rt) {
    if (lazy[rt]) {
        mx[rt << 1] += lazy[rt];
        mx[rt << 1 | 1] += lazy[rt];
        lazy[rt << 1] += lazy[rt];
        lazy[rt << 1 | 1] += lazy[rt];
        lazy[rt] = 0;
    }
}

void push_up(int rt) {
    mx[rt] = max(mx[rt << 1], mx[rt << 1 | 1]);
}

void update(int L, int R, int l, int r, int rt) {
    if (L <= l && r <= R) {
        mx[rt]++;
        lazy[rt]++;
        return;
    }
    push_down(rt);
    int m = l + r >> 1;
    if (L <= m) {
        update(L, R, lson);
    }
    if (R > m) {
        update(L, R, rson);
    }
    push_up(rt);
}

class MyCalendarThree {
   public:
    MyCalendarThree() {
        lazy.clear();
        mx.clear();
    }

    int book(int startTime, int endTime) {
        update(startTime, endTime - 1, 0, 1e9 - 1, 1);
        return mx[1];
    }
};

/**
 * Your MyCalendarThree object will be instantiated and called as such:
 * MyCalendarThree* obj = new MyCalendarThree();
 * int param_1 = obj->book(startTime,endTime);
 */