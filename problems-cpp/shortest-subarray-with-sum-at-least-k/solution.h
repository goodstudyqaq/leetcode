/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

template <typename T>
struct Fenwick {
#define lowbit(x) x & -x
    const int n;
    vector<T> a;
    // [1, n]
    Fenwick(int n) : n(n), a(n + 1, -1) {}
    void add(int x, T v) {
        while (x <= n) {
            a[x] = max(a[x], v);
            x += lowbit(x);
        }
    }

    // [1, x]
    T query(int x) {
        T res = -1;
        while (x) {
            res = max(res, a[x]);
            x -= lowbit(x);
        }
        return res;
    }
};

class Solution {
   public:
    int shortestSubarray(vector<int>& nums, int k) {
        int n = nums.size();
        vector<long long> sum(n);
        sum[0] = nums[0];
        vector<long long> x;
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            x.push_back(sum[i]);
        }
        sort(x.begin(), x.end());
        int x_num = unique(x.begin(), x.end()) - x.begin();
        x.resize(x_num);

        Fenwick<int> fen(x_num);
        int ans = 1e9;
        for (int i = 0; i < n; i++) {
            long long val = sum[i];
            if (val >= k) ans = min(ans, i + 1);
            long long tmp = val - k;
            int idx = upper_bound(x.begin(), x.end(), tmp) - x.begin();
            if (idx != 0) {
                int mx = fen.query(idx);
                if (mx != -1) {
                    ans = min(ans, i - mx);
                }
            }
            idx = lower_bound(x.begin(), x.end(), val) - x.begin();
            fen.add(idx + 1, i);
        }
        if (ans == 1e9) ans = -1;
        return ans;
    }
};