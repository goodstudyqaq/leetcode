/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    bool canCross(vector<int>& stones) {
        int n = stones.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));
        function<bool(int, int)> dfs = [&](int idx, int k) -> bool {
            if (idx == n - 1) return true;
            if (dp[idx][k] != -1) return dp[idx][k];
            int num = stones[idx];
            for (int i = idx + 1; i < n; i++) {
                if (stones[i] > num + k + 1) break;
                if (stones[i] == num + k - 1) {
                    if (dfs(i, k - 1)) return dp[idx][k] = true;
                } else if (stones[i] == num + k) {
                    if (dfs(i, k)) return dp[idx][k] = true;
                } else if (stones[i] == num + k + 1) {
                    if (dfs(i, k + 1)) return dp[idx][k] = true;
                }
            }
            return dp[idx][k] = false;
        };

        return dfs(0, 0);

    }
};