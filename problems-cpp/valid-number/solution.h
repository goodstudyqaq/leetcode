/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

class Solution {
   public:
    bool check_digit(char c) {
        return c >= '0' && c <= '9';
    }

    bool check_decimal(string s) {
        if (s.size() == 0) return false;
        if (s[0] == '+' || s[0] == '-') {
            s = s.substr(1, s.size() - 1);
        }
        if (s.size() == 0) return false;
        if (check_digit(s[0])) {
            int cnt = 0;
            for (int i = 0; i < s.size(); i++) {
                if (s[i] == '.') {
                    cnt++;
                    continue;
                }
                if (check_digit(s[i]) == 0) return false;
            }
            if (cnt != 1) return false;
            return true;
        } else if (s[0] == '.') {
            s = s.substr(1, s.size() - 1);

            if (s.size() == 0) return false;
            for (auto c : s) {
                if (check_digit(c) == 0) return false;
            }
            return true;
        } else {
            return false;
        }
    }

    bool check_integer(string s) {
        if (s.size() == 0) return false;
        if (s[0] == '+' || s[0] == '-') {
            s = s.substr(1, s.size() - 1);
        }
        if (s.size() == 0) return false;
        for (auto c : s) {
            if (check_digit(c) == 0) return false;
        }
        return true;
    }

    bool check_e(string s) {
        int idx = -1;
        int n = s.size();
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == 'e' || s[i] == 'E') {
                if (idx == -1) {
                    idx = i;
                } else {
                    return false;
                }
            }
        }
        if (idx == -1) return false;

        string s2 = s.substr(0, idx);
        string s3 = s.substr(idx + 1, n - (idx + 1));
        return ((check_decimal(s2) | check_integer(s2)) & check_integer(s3));
    }
    bool isNumber(string s) {
        return check_decimal(s) | check_integer(s) | check_e(s);
    }
};