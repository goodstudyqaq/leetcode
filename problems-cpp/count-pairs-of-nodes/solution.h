/*
Code generated by https://github.com/goodstudyqaq/leetcode-local-tester
*/
#if __has_include("../utils/cpp/help.hpp")
#include "../utils/cpp/help.hpp"
#elif __has_include("../../utils/cpp/help.hpp")
#include "../../utils/cpp/help.hpp"
#else
#define debug(...) 42
#endif

typedef pair<int, int> pii;
class Solution {
   public:
    vector<int> countPairs(int n, vector<vector<int>>& edges, vector<int>& queries) {
        int q = queries.size();
        int m = edges.size();

        vector<int> num(n + 1);

        map<pair<int, int>, int> M;
        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1];
            if (u > v) swap(u, v);
            M[{u, v}]++;
            num[u]++;
            num[v]++;
        }

        vector<int> f(n);
        for (int i = 1; i <= n; i++) {
            f[i - 1] = num[i];
        }
        sort(f.begin(), f.end());
        vector<int> ans(q);
        for (int i = 1; i <= n; i++) {
            int num1 = num[i];
            for (int j = 0; j < q; j++) {
                int cnt = queries[j];
                int need = cnt - num1;
                int idx = upper_bound(f.begin(), f.end(), need) - f.begin();
                ans[j] += n - idx;
                if (num1 * 2 > cnt) {
                    ans[j]--;
                }
            }
        }
        for (auto it : M) {
            int u = it.first.first, v = it.first.second;
            int have = it.second;
            for (int j = 0; j < q; j++) {
                int cnt = queries[j];
                if (num[u] + num[v] > cnt && num[u] + num[v] - have <= cnt) {
                    ans[j] -= 2;
                }
            }
        }

        for (int i = 0; i < q; i++) ans[i] /= 2;

        return ans;
    }
};